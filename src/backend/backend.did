type AssistantMessage = record {
  content : opt text;
  tool_calls : vec ToolCall;
};
type ChatMessage = variant {
  tool : record { content : text; tool_call_id : text };
  user : record { content : text };
  assistant : AssistantMessage;
  system : record { content : text };
};
type FunctionCall = record { name : text; arguments : vec ToolCallArgument };
type ToolCall = record { id : text; function : FunctionCall };
type ToolCallArgument = record { value : text; name : text };
service : {
  chat : (vec ChatMessage) -> (text);
  get_count : () -> (nat64) query;
  greet : (text) -> (text) query;
  increment : () -> (nat64);
  prompt : (text) -> (text);
  set_count : (nat64) -> (nat64);
}

type DepositArgs = record { fee : nat; token : text; amount : nat };

type SwapArgs = record {
  amountIn : text;
  zeroForOne : bool;
  amountOutMinimum : text;
};

type WithdrawArgs = record { fee : nat; token : text; amount : nat };

type Error = variant {
   CommonError;
   InsufficientFunds;
   InternalError: text;
   UnsupportedToken: text;
 };

type Result = variant { ok : nat; err : Error };

type Result_7 = variant {
  ok : record { balance0 : nat; balance1 : nat };
  err : Error;
};

type SwapPool = service {
    deposit : (DepositArgs) -> (Result);
    depositFrom : (DepositArgs) -> (Result);
    getUserUnusedBalance : (principal) -> (Result_7) query;
    quote : (SwapArgs) -> (Result) query;
    swap : (SwapArgs) -> (Result);
    withdraw : (WithdrawArgs) -> (Result);
}

service : SwapPool
