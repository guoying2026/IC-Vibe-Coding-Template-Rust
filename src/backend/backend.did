type Account = record { owner : principal; subaccount : opt blob };
type Activity = record { description : text; timestamp : nat64 };
type AssetConfig = record {
  collateral_factor : float64;
  decimals : nat32;
  asset_type : AssetTypes;
  token_id : principal;
  name : text;
  account : Account;
  interest_rate : float64;
  price_id : text;
};
type AssetParameter = record {
  decimals : nat32;
  asset_type : AssetTypes;
  token_id : text;
  name : text;
  interest_rate : opt float64;
  price_id : text;
  collaterals : opt float64;
};
type AssetTypes = variant { ICP; ICRC2 };
type Pool = record {
  used_amount : nat;
  token_id : principal;
  name : text;
  collateral : vec AssetConfig;
  maximum_token : nat;
  amount : nat;
  pool_account : AssetConfig;
};
type PoolConfig = record {
  token_id : text;
  name : text;
  collateral : vec text;
  maximum_token : opt nat;
};
type Result = variant { Ok : nat64; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : AssetConfig; Err : text };
type Result_3 = variant { Ok : Pool; Err : text };
type Result_4 = variant { Ok : UserInfo; Err : text };
type UserInfo = record {
  "principal" : principal;
  username : text;
  recent_activities : vec Activity;
  health_factor : float64;
  created_at : nat64;
  total_earned : float64;
  ckbtc_balance : float64;
  total_borrowed : float64;
};
service : () -> {
  approve_token : (Account, Account, nat) -> (Result);
  borrow : (text, nat) -> (Result);
  cal_borrow_value : (principal) -> (float64) query;
  cal_collateral_value : (principal) -> (float64) query;
  cal_health_factor : (principal) -> (float64) query;
  cal_interest : (principal) -> (float64) query;
  check_user_collateral : (principal) -> (vec principal);
  create_pool : (PoolConfig) -> (Result_1);
  decrease_maximum_token : (text, nat) -> ();
  edit_contract_assets : (text, opt text, opt float64, opt float64) -> ();
  edit_contract_liquidation : (float64) -> ();
  generate_random_subaccount : () -> (blob);
  get_all_assets : () -> (vec AssetConfig) query;
  get_all_pools : () -> (vec Pool) query;
  get_asset_info : (text) -> (Result_2) query;
  get_pool_info : (text) -> (Result_3) query;
  get_price : (principal) -> (float64);
  get_user_borrows : (principal) -> (vec record { principal; nat }) query;
  get_user_health_factor : (principal) -> (float64) query;
  get_user_info : (principal) -> (Result_4) query;
  get_user_supplies : (principal) -> (vec record { principal; nat }) query;
  get_user_total_borrow_value : (principal) -> (float64) query;
  get_user_total_supply_value : (principal) -> (float64) query;
  increase_maximum_token : (text, nat) -> ();
  is_authenticated : () -> (bool) query;
  liquidate : (principal) -> ();
  pool_state_borrow : (principal, nat) -> ();
  pool_state_repay : (principal, nat) -> ();
  pool_state_supply : (principal, nat) -> ();
  pool_state_withdraw : (principal, nat) -> ();
  register_user : (principal, text) -> (Result_4);
  remove_pool_collateral : (text, text) -> ();
  repay : (text, nat) -> (Result);
  spec_user_collateral : (principal) -> (vec AssetConfig);
  supply : (text, nat) -> (Result);
  transfer_token : (Account, Account, nat) -> (Result);
  update_contract_assets : (AssetParameter) -> ();
  update_pool_collateral : (text, text) -> ();
  withdraw : (text, nat) -> (Result);
}
<<<<<<< HEAD

type DepositAndSwapArgs = record {
  amountIn : text;
  zeroForOne : bool;
  amountOutMinimum : text;
  tokenInFee : nat;
  tokenOutFee : nat;
};

type Error = variant {
   CommonError;
   InsufficientFunds;
   InternalError: text;
   UnsupportedToken: text;
 };

type Result = variant { ok : nat; err : Error };

type SwapPool = service {
    depositFromAndSwap : (DepositAndSwapArgs) -> (Result);
}

service : SwapPool
=======
>>>>>>> upstream/main
