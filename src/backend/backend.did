type Account = record { owner : principal; subaccount : opt blob };
type AssetConfig = record {
  collateral_factor : float64;
  decimals : nat32;
  asset_type : AssetTypes;
  token_id : principal;
  name : text;
  account : Account;
  interest_rate : float64;
  price_id : text;
};
type AssetParameter = record {
  decimals : nat32;
  asset_type : AssetTypes;
  token_id : text;
  name : text;
  interest_rate : opt float64;
  price_id : text;
  collaterals : opt float64;
};
type AssetTypes = variant { ICP; ICRC2 };
type PoolConfig = record {
  token_id : text;
  name : text;
  collateral : vec text;
  maximum_token : opt nat;
};
type Result = variant { Ok : nat64; Err : text };
type Result_1 = variant { Ok; Err : text };
service : () -> {
  approve_token : (Account, Account, nat) -> (Result);
  borrow : (text, nat) -> (Result);
  cal_borrow_value : (principal) -> (float64) query;
  cal_collateral_value : (principal) -> (float64) query;
  cal_health_factor : (principal) -> (float64) query;
  cal_interest : (principal) -> (float64) query;
  check_user_collateral : (principal) -> (vec principal);
  create_pool : (PoolConfig) -> (Result_1);
  decrease_maximum_token : (text, nat) -> ();
  edit_contract_assets : (text, opt text, opt float64, opt float64) -> ();
  edit_contract_liquidation : (float64) -> ();
  generate_random_subaccount : () -> (blob);
  get_price : (principal) -> (float64);
  increase_maximum_token : (text, nat) -> ();
  liquidate : (principal) -> ();
  pool_state_borrow : (principal, nat) -> ();
  pool_state_repay : (principal, nat) -> ();
  pool_state_supply : (principal, nat) -> ();
  pool_state_withdraw : (principal, nat) -> ();
  remove_pool_collateral : (text, text) -> ();
  repay : (text, nat) -> (Result);
  spec_user_collateral : (principal) -> (vec AssetConfig);
  supply : (text, nat) -> (Result);
  transfer_token : (Account, Account, nat) -> (Result);
  update_contract_assets : (AssetParameter) -> ();
  update_pool_collateral : (text, text) -> ();
  withdraw : (text, nat) -> (Result);
}
